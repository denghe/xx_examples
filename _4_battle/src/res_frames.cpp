#include "pch.h"
#include "res_frames.h"

// this file is generated by tool: pics2loadcode

xx::Task<> ResFrames::AsyncLoad(std::string picRoot, int32_t texSiz) {
	std::vector<std::pair<std::string, xx::Ref<xx::Frame>*>> ffs;
	co_return co_await AsyncLoad(ffs, picRoot, texSiz);
}

xx::Task<> ResFrames::AsyncLoad(std::vector<std::pair<std::string, xx::Ref<xx::Frame>*>>& ffs, std::string picRoot, int32_t texSiz) {
	ffs.emplace_back(picRoot + "blade_light.png", &this->blade_light);
	ffs.emplace_back(picRoot + "button.png", &this->button);
	ffs.emplace_back(picRoot + "circle.png", &this->circle);
	ffs.emplace_back(picRoot + "cring.png", &this->cring);
	ffs.emplace_back(picRoot + "explosion_13_1.png", &this->explosion_13_1);
	ffs.emplace_back(picRoot + "explosion_13_2.png", &this->explosion_13_2);
	ffs.emplace_back(picRoot + "explosion_13_3.png", &this->explosion_13_3);
	ffs.emplace_back(picRoot + "explosion_13_4.png", &this->explosion_13_4);
	ffs.emplace_back(picRoot + "explosion_13_5.png", &this->explosion_13_5);
	ffs.emplace_back(picRoot + "explosion_13_6.png", &this->explosion_13_6);
	ffs.emplace_back(picRoot + "explosion_13_7.png", &this->explosion_13_7);
	ffs.emplace_back(picRoot + "ring.png", &this->ring);
	ffs.emplace_back(picRoot + "quad.png", &this->quad);

	// load / download
#ifdef __EMSCRIPTEN__
	int32_t downloadCount{};
#endif
	for (auto& ff : ffs) {
#ifdef __EMSCRIPTEN__
		xx::EngineBase3::Instance().tasks.Add([pff = &ff, &downloadCount, this]()->xx::Task<> {
			auto& ff = *pff;
			*ff.second = co_await xx::EngineBase3::Instance().AsyncLoadFrameFromUrl(ff.first);
			++downloadCount;
			});
#else
		* ff.second = xx::EngineBase3::Instance().LoadFrame(ff.first);
#endif
	}
#ifdef __EMSCRIPTEN__
	while (downloadCount < ffs.size()) co_yield 0;
#endif

	// batch combine textures
	if (texSiz) {
		auto ok = xx::DynamicTexturePacker<>::Pack(ffs, texSiz);
		assert(ok);
	}

	// fill groups

	explosion_13_.Add(explosion_13_1);
	explosion_13_.Add(explosion_13_2);
	explosion_13_.Add(explosion_13_3);
	explosion_13_.Add(explosion_13_4);
	explosion_13_.Add(explosion_13_5);
	explosion_13_.Add(explosion_13_6);
	explosion_13_.Add(explosion_13_7);
	co_return;
}
